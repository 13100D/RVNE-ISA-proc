$date
   Mon Oct 21 00:29:09 2024
$end
$version
  2022.1
$end
$timescale
  1ps
$end
$scope module tb_riscv_pipeline_basic $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module uut $end
$var wire 1 # clk $end
$var wire 1 $ reset $end
$var reg 32 % IF_ID_instr [31:0] $end
$var reg 32 & IF_ID_PC [31:0] $end
$var reg 32 ' ID_EX_PC [31:0] $end
$var reg 32 ( ID_EX_instr [31:0] $end
$var reg 32 ) ID_EX_read_data [31:0] $end
$var reg 5 * ID_EX_rs1 [4:0] $end
$var reg 5 + ID_EX_rd [4:0] $end
$var reg 1 , ID_EX_hint [0:0] $end
$var reg 12 - ID_EX_imm [11:0] $end
$var reg 3 . ID_EX_funct3 [2:0] $end
$var reg 32 / EX_MEM_alu_result [31:0] $end
$var reg 5 0 EX_MEM_rd [4:0] $end
$var reg 1 1 EX_MEM_hint [0:0] $end
$var reg 3 2 EX_MEM_funct3 [2:0] $end
$var reg 32 3 MEM_WB_alu_result [31:0] $end
$var reg 5 4 MEM_WB_rd [4:0] $end
$var reg 3 5 MEM_WB_funct3 [2:0] $end
$var reg 32 6 PC [31:0] $end
$var integer 32 7 i [31:0] $end
$var wire 7 8 opcode [6:0] $end
$var wire 5 9 rd [4:0] $end
$var wire 1 : hint [0:0] $end
$var wire 3 ; funct3 [2:0] $end
$var wire 5 < rs1 [4:0] $end
$var wire 12 = imm [11:0] $end
$var wire 32 > alu_input1 [31:0] $end
$var wire 32 ? alu_input2 [31:0] $end
$var reg 32 @ alu_result [31:0] $end
$var reg 4 A SVR_WVR_Addr [3:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
1"
0#
1$
b0 %
b0 &
b0 '
b0 (
bx )
bx *
bx +
x,
bx -
bx .
b0 /
bx 0
x1
bx 2
b0 3
bx 4
bx 5
b0 6
b100000000 7
b0 8
b0 9
0:
b0 ;
b0 <
b0 =
bx >
b0xxxxxxxxxxxx ?
bx @
bx A
$end
#5000
1!
1#
#10000
0!
0"
0#
0$
#15000
1!
1#
b1110000000000001100000000001 %
b0 )
b0 *
b0 +
0,
b0 -
b0 .
bx /
b1 6
b1 8
b10000 9
1:
b1 ;
b11100000 =
b0 >
b0 ?
b0 @
#20000
0!
0#
#25000
1!
1#
b10000001010000010000001 %
b1 &
b1110000000000001100000000001 (
b10000 +
1,
b11100000 -
b1 .
b0 /
b0 0
01
b0 2
bx 3
b10 6
b10001 9
0:
b10 ;
b1 <
b100 =
b11100000 ?
b11100000 @
#30000
0!
0#
#35000
1!
1#
b10001100000010100100100000001 %
b10 &
b1 '
b10000001010000010000001 (
b1 )
b1 *
b10001 +
0,
b100 -
b10 .
b11100000 /
b10000 0
11
b1 2
b0 3
b0 4
b0 5
b11 6
b10010 9
1:
b100 ;
b10 <
b100011000 =
b1 >
b100 ?
b101 @
#40000
0!
0#
#45000
1!
1#
b1000000011001000110000010 %
b11 &
b10 '
b10001100000010100100100000001 (
b10 )
b10 *
b10010 +
1,
b100011000 -
b100 .
b101 /
b10001 0
01
b10 2
b11100000 3
b10000 4
b1 5
b100 6
b100 7
b10 8
b11 9
0:
b1 ;
b11 <
b10000 =
b10 >
b100011000 ?
b100011010 @
#50000
0!
0#
#55000
1!
1#
b101000000100010101000000010 %
b100 &
b11 '
b1000000011001000110000010 (
b11 )
b11 *
b11 +
0,
b10000 -
b1 .
b100011010 /
b10010 0
11
b100 2
b101 3
b10001 4
b10 5
b101 6
b100 7
b100 9
1:
b10 ;
b100 <
b1010000 =
b11 >
b10000 ?
b10011 @
b100 A
#60000
0!
0#
#65000
1!
1#
b10110000000000101100001010000010 %
b101 &
b100 '
b101000000100010101000000010 (
b100 )
b100 *
b100 +
1,
b1010000 -
b10 .
b10011 /
b11 0
01
b1 2
b100011010 3
b10010 4
b100 5
b110 6
b10000 7
b101 9
0:
b100 ;
b101 <
b101100000000 =
b100 >
b1010000 ?
b1010100 @
b1 A
#70000
0!
0#
#75000
1!
1#
bx %
b110 &
b101 '
b10110000000000101100001010000010 (
b101 )
b101 *
b101 +
0,
b101100000000 -
b100 .
b1010100 /
b100 0
11
b10 2
b10011 3
b11 4
b1 5
b111 6
b100 7
bx 8
bx 9
x:
bx ;
bx <
bx =
b101 >
b101100000000 ?
b101100000101 @
#80000
0!
0#
#85000
1!
1#
b111 &
b110 '
bx (
bx )
bx *
bx +
x,
bx -
bx .
b101100000101 /
b101 0
01
b100 2
b1010100 3
b100 4
b10 5
b1000 6
b100 7
bx >
b0xxxxxxxxxxxx ?
bx @
b111 A
#90000
0!
0#
#95000
1!
1#
b1000 &
b111 '
bx /
bx 0
x1
bx 2
b101100000101 3
b101 4
b100 5
b1001 6
b10000 7
b100 A
#100000
0!
0#
#105000
1!
1#
b1001 &
b1000 '
bx 3
bx 4
bx 5
b1010 6
#110000
0!
0#
#115000
1!
1#
b1010 &
b1001 '
b1011 6
#120000
0!
0#
#125000
1!
1#
b1011 &
b1010 '
b1100 6
#130000
0!
0#
#135000
1!
1#
b1100 &
b1011 '
b1101 6
#140000
0!
0#
#145000
1!
1#
b1101 &
b1100 '
b1110 6
#150000
0!
0#
#155000
1!
1#
b1110 &
b1101 '
b1111 6
#160000
0!
0#
#165000
1!
1#
b1111 &
b1110 '
b10000 6
#170000
0!
0#
#175000
1!
1#
b10000 &
b1111 '
b10001 6
#180000
0!
0#
#185000
1!
1#
b10001 &
b10000 '
b10010 6
#190000
0!
0#
#195000
1!
1#
b10010 &
b10001 '
b10011 6
